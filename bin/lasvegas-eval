#!/usr/bin/env python
from __future__ import division

import argparse

from keras.models import load_model, Sequential

from lasvegas import constants
from lasvegas.state import State
from lasvegas import turns

parser = argparse.ArgumentParser()
parser.add_argument('-n', '--games', default=1000, type=int,
        help='number of games to run the evaluation for')
parser.add_argument('-a', '--agent', default='model', type=str,
        choices=['random', 'model', 'greedy'],
        help='agent type to evaluate')
parser.add_argument('-b', '--baseline', default='random', type=str,
        choices=['random', 'greedy'],
        help='baseline agent type to evaluate against')
parser.add_argument('-m', '--model', default=None, type=str,
        help='filename of the model to use')
args = parser.parse_args()

if args.model:
    model = load_model(args.model)
else:
    model = None

agent = getattr(turns, args.agent + '_turn')
baseline = getattr(turns, args.baseline + '_turn')

total = 0
for game in range(args.games):
    s = State.initial()
    while not s.game_end():
        while not s.round_end():
            # Run the agent we're evaluating
            s = agent(s, 0, model)

            # Run turns for all other agents
            for i in range(1, s.players):
                s = baseline(s, i)
        if s.round_num != constants.MAX_ROUNDS:
            s = s.advance_round()
    total += s.cash[0]

print(total / args.games)
